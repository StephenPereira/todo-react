{"version":3,"sources":["components/PageTitle.js","components/List.js","components/ListTitle.js","containers/titleState.js","components/ListEntry.js","containers/entryState.js","components/ListFooter.js","components/ListItem.js","components/ListItems.js","containers/listState.js","App.js","serviceWorker.js","index.js"],"names":["pageTitle","className","todoList","props","children","ListTitle","React","memo","useState","JSON","parse","window","localStorage","getItem","title","setTitle","titleLen","trim","length","onChange","event","target","value","clearTitle","setItem","document","querySelector","focus","updateTitle","titleString","stringify","alert","submitHandler","key","preventDefault","titleState","placeholder","onBlur","onKeyDown","onClick","listEntry","addEntry","entry","setEntry","entryLen","clearEntry","entryState","onKeyUp","listFooter","listItem","listItems","items","removeItem","crossItem","ListItem","map","list","index","id","role","type","aria-label","defaultChecked","button","crossed","defaultValue","item","e","setList","useEffect","newList","filter","listCopy","console","log","clearList","addList","entryKey","Date","now","Math","floor","random","App","listState","PageTitle","List","ListEntry","ListItems","ListFooter","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc537d74.chunk.js","sourcesContent":["import React from 'react';\n\nconst pageTitle = () => {\n    return (\n        <div className=\"title\">\n            <h1>A Very Simple To-Do List.</h1>\n        </div>\n    )\n};\n\nexport default pageTitle;","import React from 'react';\n\nconst todoList = ( props ) => {\n    return (\n        <div className=\"todo-list\">\n            {props.children}\n        </div>\n\n    )\n};\n\nexport default todoList;","import React from 'react';\nimport titleState from '../containers/titleState';\n\nconst ListTitle = React.memo(props => {\n    const {title, titleLen, onChange, updateTitle, submitHandler, clearTitle} = titleState();\n\n    return (\n    <div className=\"title-wrapper\">\n            <input className=\"list-title\" placeholder=\"Title...\" value={title} onChange={onChange} onBlur={updateTitle} onKeyDown={submitHandler} />\n            {(titleLen > 0) ? <button className=\"clear-btn-title\" onClick={clearTitle}>x</button> : null}\n    </div>\n    )\n});\n\nexport default ListTitle;","import { useState } from 'react';\n// Manages state of the title. When the value of the title changes, the state is updated and the update is sent to localStorage\n// When the X button is pressed, it clears the entry. It only appears when the text length is greater than 0.\nexport default () => {\n    // If there is localStorage, we grab whatever title is stored there. If not, we set the title to an empty string\n    const init = () => (JSON.parse(window.localStorage.getItem('title')) || '');\n    const [title, setTitle] = useState(init);\n\n    // If enter is pressed in the form, we prevent the refresh of the page and blur it. The blur triggers the onBlur which then\n    // triggers an update through updateTitle\n    const submitHandler = event => {\n        if (event.key === 'Enter') {\n            // Prevent the default page refresh\n            event.preventDefault();\n            // Exit the title field, which will trigger updateTitle()\n            // Enter the entry field\n            document.querySelector('.list-entry').focus();\n        }\n    };\n\n    // Updates the title in localStorage. The state is already updated with every keystroke. Kept seperately as we don't want to\n    // constantly update localStorage every time a key is pressed\n    const updateTitle = () => {\n        if(window.localStorage) {\n            const titleString = JSON.stringify(title.trim())\n            // On every item typed in, the state is updated. When submitted on blur, uses the state to update localStorage\n            window.localStorage.setItem('title', titleString);\n        } else {\n            alert(\"Local Storage was not detected. Your list items will not be stored!\");\n        }\n    };\n\n    const clearTitle = () => {\n        // Clear the title\n        setTitle('');\n        // Update the title in localStorage\n        window.localStorage.setItem('title', '');\n        // Set the focus back to the field so user can type a new title in\n        document.querySelector('.list-title').focus();\n    }\n\n    return {\n        title,\n        titleLen: title.trim().length,\n        onChange: event => {\n            setTitle(event.target.value);\n        },\n        clearTitle,\n        updateTitle,\n        submitHandler,\n    };\n\n};","import React from 'react';\nimport entryState from '../containers/entryState';\n\nconst listEntry = ({ addEntry }) => {\n    const {entry, entryLen, onChange, clearEntry} = entryState();\n    return (\n            <div className=\"entry-wrapper\">\n                <input className=\"list-entry\" placeholder=\"I have to...\" value={entry} onChange={onChange} \n                onKeyUp={event => {\n                            if (event.key === 'Enter' && entryLen > 0) {\n                                event.preventDefault();\n                                // Send update to listState\n                                addEntry(entry.trim());\n                                // Reset value of entry\n                                clearEntry();\n        }}} />\n                {(entryLen > 0) ? <button className=\"clear-btn-entry\" onClick={clearEntry}>x</button> : null}\n            </div>\n    )\n};\n\nexport default listEntry;\n","import { useState } from 'react';\n\nexport default () => {\n    const [entry, setEntry] = useState('');\n\n    const clearEntry = () => {\n        // Clear the entry state\n        setEntry('');\n        // Set the focus back to the field so user can type a new title in\n        document.querySelector('.list-entry').focus();\n    }\n\n    return {\n        entry,\n        entryLen: entry.trim().length,\n        onChange: event => {\n            setEntry(event.target.value);\n        },\n        clearEntry,\n    };\n\n};\n","import React from 'react';\n\nconst listFooter = () => {\n    return (\n        <div className=\"list-bottom\">\n            <p className=\"footer-text\">Â© 2019 Stephen Pereira. Lato font from Google Fonts.</p>\n        </div>\n    )\n};\n\nexport default listFooter;","import React from 'react';\n\nconst listItem = ( props ) => {\n    return (\n        <div>\n            {props.children}\n        </div>\n\n    )\n};\n\nexport default listItem;","import React from 'react';\nimport ListItem from './ListItem';\n\nconst listItems = ({ items, removeItem, crossItem, onChange, submitHandler}) => (\n    <ListItem>\n    {/* To update the state with the next text, use target.value. To update crossthrough, change the class name and not the style\n    Do it in the same way as the removeItem() way with .filter */}\n        {items.map((list, index) => (\n            <div className=\"entry-wrapper\" key={list.id} id={list.id} role=\"list\">\n                <label className=\"checkbox\">\n                    <input type=\"checkbox\" className=\"checkbox\" aria-label=\"Check item off list\" onClick={() => {crossItem(index)}} defaultChecked={list.button} />\n                </label>\n                <input className={list.crossed} aria-label=\"Edit list item\" defaultValue={list.item} onBlur={e => onChange(index, e.target.value)} onKeyUp={submitHandler} />\n                <button className=\"clear-btn\" aria-label=\"Remove item off list\" \n                onClick={() => {removeItem(list.id)}}>x</button>\n            </div>\n        ))}\n    </ListItem>\n);\n\nexport default listItems;\n","import { useState, useEffect } from 'react';\n// Manages state of the List. When the value of the List changes, the state is updated and the update is sent to localStorage\n// When the X button is pressed, it deletes the entry from the list, updates localStorage and state\nexport default () => {\n    // If there is localStorage, we grab whatever List is stored there. If not, we set the List to an empty string\n    // We use JSON.parse() to convert the data back into an array with keys\n    const init = () => (JSON.parse(window.localStorage.getItem('list')) || []);\n    const [list, setList] = useState(init);\n    // Updates the List in localStorage.\n    useEffect(() => {\n        // Checks if there is localStorage. If there is, we can add the list to it\n        if(window.localStorage) {\n            // We add the entry to our list\n            window.localStorage.setItem(\"list\", JSON.stringify(list));\n        } else {\n            alert(\"Local Storage was not detected. Your list items will not be stored!\");\n        }\n    });\n\n    // Adds an item to the list and updates localStorage at the end with the new list.\n    const addList = addEntry => {\n        // Generates a random number to use as an ID/key \n        const itemID = Date.now() + Math.floor(Math.random() * 99);\n        // Creating a key to add to the list with the information required, with the cross-out value as false\n        const entryKey = {id: itemID, item: addEntry, crossed: \"list-item\", button: false};\n        // Adds the entry to the list.\n        setList([...list, entryKey]);\n    };\n\n    const removeItem = id => {\n        const newList = list.filter((item) => item.id !== id);\n        setList(newList);\n    };\n\n    const onChange = (id, value) => {\n        // Create a copy of the list\n        let listCopy = [...list];\n        console.log(`${value} and ${listCopy[id].id}`)\n        // Change the value of the to-do list text to what was inputted. If it's an empty string remove item\n        if (value.trim() === \"\") {\n            removeItem(listCopy[id].id);\n        } else {\n            listCopy[id].item = value;\n            // Modify it in the state. Will trigger useEffect() which will then update localStorage\n            setList(listCopy);\n        };\n    };\n\n    const submitHandler = event => {\n        if (event.key === 'Enter') {\n            // Enter the entry field after hitting submit on a list input. Alternative to updating localStorage on every change\n            // while still maintaining good functionality\n            document.querySelector('.list-entry').focus();\n        }\n    };\n\n    const crossItem = id => {\n        // Works similar to the above. Checks to see if the item is already crossed first before crossing it out. Serves to cross and uncross\n        // as well as set the checked status of the button. Triggers an update to localStorage and re-render.\n        let listItem = [...list];\n        (listItem[id].crossed === \"list-strike\") ? listItem[id].crossed = \"list-item\" : listItem[id].crossed = \"list-strike\";\n        (listItem[id].button === false) ? listItem[id].button = true : listItem[id].button = false;\n        setList(listItem);\n    };\n\n    return {\n        list,\n        setList,\n        onChange,\n        crossItem,\n        clearList: () => setList(''),\n        addList,\n        removeItem,\n        submitHandler,\n    };\n};","import React from 'react';\nimport PageTitle from './components/PageTitle';\nimport List from './components/List'\nimport ListTitle from './components/ListTitle';\nimport ListEntry from './components/ListEntry';\nimport ListFooter from './components/ListFooter';\nimport ListItems from './components/ListItems';\nimport listState from './containers/listState';\n\nfunction App() {\n  const { list, addList, removeItem, crossItem, onChange, submitHandler} = listState();\n  return (\n      <div>\n      <PageTitle/>\n      <List>\n        <ListTitle/>\n        <ListEntry addEntry={listItem => addList(listItem)} />\n        <ListItems items={list} removeItem={removeItem} crossItem={crossItem} onChange={onChange} submitHandler={submitHandler} />\n        <ListFooter/>\n      </List>\n      </div>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}